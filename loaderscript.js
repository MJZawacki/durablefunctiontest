// Auto-generated by the Load Impact converter

import { group } from "k6";
import http from "k6/http";
import {sleep} from "k6";
import { check } from "k6";
import { Trend } from "k6/metrics";
import { Counter } from "k6/metrics";

let FunctionDuration = new Trend("Function Duration");
let RetriesStats = new Trend("Retries");
let Failures = new Counter("Failures");
let maxtry = 20

let testurl = "https://xxx.azurewebsites.net/api/trigger_HttpStart";
export let options = {
    // Add VU ramping option, total test length is 3m
    stages: [
        // Ramp up from 1 VU to 25 VUs for 1 minute
        { target: 10, duration: "60s" },

        // Stay constant at 25 VUs for 1 minute
        { target: 10, duration: "240s" },

        // Ramp down from 25 VUs to 0 VUs for 1 minute
        { target: 0, duration: "60s" }
    ]
};

export default function() {
    let res;
    let uris = [];
    res = http.get(testurl);
    check(res, {
        "is HttpStart status 202": (r) => r.status === 202
      });
    var jsonData;
    try {

        var jsonData = res.json();
    }
    catch (exception) {
        console.log(exception);
        console.log(res.body());
    }
    var url = jsonData.statusQueryGetUri
    
    uris.push(url);
    uris.push(jsonData.sendEventPostUri);
    uris.push(jsonData.terminatePostUri);
    uris.push(jsonData.rewindPostUri);
    var retry = parseInt(res.headers['Retry-After']);



    var responseCode = res.status;

    var runtimeStatus;
    var startTime, endTime, duration;
    for (var i=1; ((i <= maxtry) && (responseCode == 202 )); i++) 
    {
        sleep(retry);

        res = http.get(url);
        check(res, {
            "is WebHook status 20x (complete)": (r) => (r.status === 200) || (r.status === 202)
          });
        retry = parseInt(res.headers['Retry-After']);

        jsonData = res.json();
        runtimeStatus = jsonData.runtimeStatus;
        responseCode = res.status;



        if (runtimeStatus == 'Completed') {


            check(jsonData.output.length, {
                "is output 200": (len) => len == 200
              });
            responseCode = res.status;
            startTime = new Date(jsonData.createdTime);
            endTime = new Date(jsonData.lastUpdatedTime);
            duration = Math.abs(endTime.getTime() - startTime.getTime()) / 1000
            FunctionDuration.add(duration);
            
         } else if (runtimeStatus == 'Failed') {
             Failures.add(1)
         }
    }
    //console.log(runtimeStatus + " : " + i + " : " + duration + "s");
    if (runtimeStatus != 'Completed') {
        console.log("webhooks: " + uris)
    }
    RetriesStats.add(i);
    check(i, {
        "is still pending": (i) => i < maxtry
      });
      check(runtimeStatus, {
        "function completed": (status) => status == 'Completed'
      });

}